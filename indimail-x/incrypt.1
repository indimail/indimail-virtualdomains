.TH incrypt 1

.SH NAME
incrypt - command line implementation of crypt(3)

.SH SYNOPSYS
\fBincrypt\fR [ -h hash ] [ -s salt ] passphrase
.I salt

.SH DESCRIPTION
incrypt is a command line impementation of crypt(3) password encryption
function. The crypt functions irreversibly “hash” phrase for storage in the
system password database (shadow(5)) using a cryptographic “hashing
method.” The result of this operation is called a “hashed passphrase” or
just a “hash.” Hashing methods are described in crypt(5).

\fIhash\fR controls which hashing method to use, and also supplies various
parameters to the chosen method, most importantly a random “salt” which en‐
sures that no two stored hashes are the same, even if the phrase strings
are the same.

If
.I salt
is a character string starting with the characters "$\fIid\fP$"
followed by a string terminated by "$":
.RS

$\fIid\fP$\fIsalt\fP$\fIencrypted\fP

.RE
then instead of using the DES machine,
.I id
identifies the encryption method used and this then determines how the rest
of the password string is interpreted.
The following values of
.I id
are supported:
.RS
.TS
l l.
ID  | Method
_
1   | MD5
2a  | Blowfish (not in mainline glibc; added in some
    | Linux distributions)
.\" openSUSE has Blowfish, but AFAICS, this option is not supported
.\" natively by glibc -- mtk, Jul 08
.\"
.\" md5 | Sun MD5
.\" glibc doesn't appear to natively support Sun MD5; I don't know
.\" if any distros add the support.
5   | SHA-256 (since glibc 2.7)
6   | SHA-512 (since glibc 2.7)
.TE
.RE

So $5$\fIsalt\fP$\fIencrypted\fP is an SHA-256 encoded password and
$6$\fIsalt\fP$\fIencrypted\fP is an SHA-512 encoded one.

"\fIsalt\fP" stands for the up to 16 characters following "$\fIid\fP$" in
the salt. The encrypted part of the password string is the actual computed
password. The size of this string is fixed:
.TS
l l.
MD5     | 22 characters
SHA-256 | 43 characters
SHA-512 | 86 characters
.TE

The characters in "\fIsalt\fP" and "\fIencrypted\fP" are drawn from the set
[\fBa\-zA\-Z0\-9./\fP].
In the MD5 and SHA implementations the entire
.I key
is significant (instead of only the first
8 bytes in DES).

Warning: The key space consists of 2**56 equal 7.2e16 possible values.
Exhaustive searches of this key space are possible using massively parallel
computers. Software, such as crack(1), is available which will search the
portion of this key space that is generally used by humans for passwords.
Hence, password selection should, at minimum, avoid common words and names.
The use of a passwd(1) program that checks for crackable passwords during
the selection process is recommended.

.SH OPTIONS

.TP 3
\fB\-h\fR \fIhash\fR
Specifiy hash which is one of DES, MD5, SHA-256, SHA-512. Here \fIID\fR is
the id in \fI/etc/shadow\fR. See \fBincrypt\fR(1).
.TS
l l.
HASH    ID Description
_
DES     -  DES encryption (shouldn't be used)
MD5     1  MD5 encryption (shouldn't be used)
SHA-256 5  SHA256 encryption
SHA-512 6  SHA512 encryption
.TE

.TP 3
\fB\-S\fR \fIsalt\fR
Specify a base64 encoded salt to be used when generating SCRAM password. If
not specified, this will be generated using libsodium/gsasl. Here base64
implies characters [0-9], [a-z], [A-Z] and the two characters [./].

.SH NOTE on DES Encryption
The original hashing method from Unix V7, based on the DES block cipher.
Because DES is cheap on modern hardware, because there are only 4096
possible salts and 2**56 possible hashes, and because it truncates
passphrases to 8 characters, it is feasible to discover any passphrase
hashed with this method. It should only be used if you absolutely have to
generate hashes that will work on an old operating system that supports
nothing else.

It is based on the Data Encryption Standard algorithm with variations
intended (among other things) to discourage use of hardware implementations
of a key search.

\fIpassphrase\fR is a user's typed password.

\fIsalt\fR is a two-character string chosen from the set [a-zA-Z0-9./].
This string is used to perturb the algorithm in one of 4096 different
ways.

By taking the lowest 7 bits of each of the first eight characters of the
key, a 56-bit key is obtained. This 56-bit key is used to encrypt
repeatedly a constant string (usually a string consisting of all zeros).
The returned value points to the encrypted password, a series of 13
printable ASCII characters (the first two characters represent the salt
itself).  The return value points to static data whose content is
overwritten by each call.

.SH RETURN VALUES
On success, the encrypted password is printed on stdout. On error, non zero
status is returned.

.SH SEE ALSO
crypt(3)
