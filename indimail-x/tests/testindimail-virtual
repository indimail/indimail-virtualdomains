#!/bin/sh
#
# $Id: testindimail-virtual,v 1.9 2023-09-25 18:39:23+05:30 Cprogrammer Exp mbhangui $
#
start=$(date +'%s')
user=$(whoami)
failed=""
hash_supported="DES MD5 SHA-256 SHA-512"
domain1=example.com    # virtual domain
domain2=newexample.com # alias domain
domain3=example2.com   # remote domain
#
#
testuser1=tuser01@$domain1
testuser2=tuser02@$domain1
testuser3=tuser03@$domain1
testuser4=tuser04@$domain1
password1="abcdefgh1234"
password2="abcdefgh2345"
password3="abcdefgh3456"
domain=indimail.org
testdir=/tmp/qmail-test
servicedir=$testdir/service
maildir=$testdir/$user/Maildir
qmaildir=$testdir/indimail
indimaildir=$testdir/indimail
sysconfdir=$testdir/etc/indimail
cntrldir=$sysconfdir/control
certdir=$sysconfdir/certs
tmpfifodir=$testdir/inquery
logdir=$testdir/logs
bindir=/usr/bin
sbindir=/usr/sbin
SOFT_MEM=104857600
confsplit=23
HOSTNAME=$(uname -n)
LOCALIP=0
qmail_newu=$sbindir/qmail-newu
qmail_start=$sbindir/qmail-start
qmail_smtpd=$sbindir/qmail-smtpd
multilog=$sbindir/multilog
svscan=$sbindir/svscan
svctool=$sbindir/svctool
qmail_inject=$bindir/qmail-inject
setuidgid=$bindir/setuidgid
tcpserver=$bindir/tcpserver
qmail_queue=$sbindir/qmail-queue
gsasl=$bindir/gsasl
in_cnf=$sysconfdir/indimail.cnf
MYSQL_USER=indimail
MYSQL_PASS="abcdefgh-"
MYSQL_DB="indimail"
MYSQL_SOCK=$testdir/run/mysqld/mysqld.sock
MYSQL_PORT=3307
MYUID=$(id -u)
MYGID=$(id -g)
INUID=$(id -u indimail)
INGID=$(id -g indimail)
sleep_int=1

trap do_cleanup_failed EXIT

setup_maildir()
{
	if [ -d $maildir/new ] ; then
		find $maildir/new -type f -exec /bin/rm -f {} \;
	fi
	echo "Creating $maildir"
	status=0
	for i in cur new tmp
	do
		mkdir -p $maildir/$i
		if [ $? -ne 0 ] ; then
			status=1
		fi
	done
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing create maildir succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing create maildir failed"
		exit 1
	fi
}

check_service()
{
	if [ $# -eq 2 ] ; then
		min_up=$2
	else
		min_up=10
	fi
	count=1
	while true
	do
		tmp=$(svstat $servicedir/$1 2>&1)
		if [ -z "$tmp" ] ; then
			echo "Service $1 is not up. unable to get service status" 1>&2
			return 2
		fi
		echo $tmp | grep -E -i "warning:|Error:" > /dev/null
		if [ $? -ne 0 ] ; then
			t=$(echo $tmp | awk '{print $2}')
			s=$(echo $tmp | awk '{print $3}')
		else
			sleep 5;
			count=$(expr $count + 1)
			if [ $count -gt 12 ] ; then
				break
			fi
			continue
		fi
		if [ "$t" = "up" ] ; then
			if [ $s -ge $min_up ] ; then
				return 0
			else
				sleep $(expr $min_up - $s)
				count=$(expr $count + 1)
				if [ $count -gt 12 ] ; then
					break
				fi
				continue
			fi
		elif [ "$t" = "wait" -a $s -gt 0 ] ; then
			sleep $s
			count=$(expr $count + 1)
			if [ $count -gt 12 ] ; then
				break
			fi
			continue
		elif [ "$t" = "down" -o $s -eq 0 ] ; then
			count=$(expr $count + 1)
		else
			echo "Service $1 is not up: [$tmp]" 1>&2
			return 2
		fi
		sleep 5;
		if [ $count -gt 12 ] ; then
			break
		fi
	done
	echo "Service $1 is not up: [$tmp]" 1>&2
	return 1
}

setup_assign()
{
	if [ ! -f $sysconfdir/users/assign ] ; then
		mkdir -p $sysconfdir/users
		(
		uid=$(id -u $user)
		gid=$(id -g $user)
		echo "=$user:$user:$uid:$gid:$testdir/$user:::"
		echo "+$user-:$user:$uid:$gid:$testdir/$user:-::"
		echo "+$domain-:$domain:555:555:$qmaildir/domains/$domain:-::"
		echo "."
		) > $sysconfdir/users/assign
	fi
	echo "Creating $sysconfdir/users/cdb"
	$qmail_newu $sysconfdir/users
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing $qmail_newu succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing $qmail_newu failed"
		exit 1
	fi
}

setup_queue()
{
	echo "Creating queue in $qmaildir/queue"
	mkdir -p $qmaildir
	$sudo env BIGTODO=0 queue-fix -s $confsplit $qmaildir/queue
	ret=$?
	t1=$($sudo ls $qmaildir/queue/todo|wc -l)
	t2=$($sudo ls $qmaildir/queue/intd|wc -l)
	if [ $ret -eq 0 -a $t1 -eq 0 -a $t2 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing queue-fix succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing queue-fix failed"
		exit 1
	fi
}

setup_config()
{
	mkdir -p $cntrldir
	mkdir -p $testdir/run/mysqld
	cd $testdir
	$sudo chown mysql:mysql $testdir/run/mysqld
	mkdir -p $qmaildir/mysqldb

	echo "Creating default config files in $cntrldir"
	env CONTROLDIR=$cntrldir /usr/libexec/indimail/config-fast $HOSTNAME 1>&3
	t1=$?
	echo "./Maildir/" > $cntrldir/defaultdelivery
	echo TLSv1_3      > $cntrldir/tlsclientmethod
	echo TLSv1_3      > $cntrldir/tlsservermethod
	$sudo $svctool --cntrldir=$cntrldir --config=qmail 1>&3
	if [ $t1 -eq 0 -a $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svctool create indimail-mta config succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing svctool create indimail-mta config failed"
		exit 1
	fi

	if [ ! -f $certdir/servercert.pem ] ; then
		echo "Creating certificates"
		$sudo $svctool --certdir=$certdir --config=cert \
			--postmaster=postmaster@$HOSTNAME --common_name=$HOSTNAME 1>&3 2>&1
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing svctool create certificate succeeded"
		else
			fcount=$(expr $fcount + 1)
			echo "  testing svctool create certificate failed"
			exit 1
		fi
	fi

	# indimail config
	echo "Creating indimail config"
	mkdir -p $qmaildir/alias
	$sudo $svctool --cntrldir=$cntrldir --qmaildir=$qmaildir \
		--indimaildir=$qmaildir --sysconfdir=$sysconfdir --config=indimail \
		--mysqluser="$MYSQL_USER" --mysqlpass="$MYSQL_PASS" \
		--mysqlhost=localhost --mysqlsocket=$MYSQL_SOCK --mysqlport=$MYSQL_PORT 1>&3
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svctool create indimail config succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing svctool create indimail config failed"
		exit 1
	fi

	# mysql cnf file
	if [ ! -f $in_cnf ] ; then
		echo "Creating mysql config $in_cnf"
  		$sudo $svctool --cntrldir=$cntrldir --config=mysql --mysqlPrefix=/usr \
			--sysconfdir=$sysconfdir --mysqlsocket=$MYSQL_SOCK --mysqlport=$MYSQL_PORT \
			--databasedir=$qmaildir/mysqldb 1>&3 2>&1
		if [ $? -eq 0 -a -f $in_cnf ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing svctool create MySQL config $in_cnf succeeded"
		else
			fcount=$(expr $fcount + 1)
			echo "  testing svctool create MySQL config $in_cnf failed"
			exit 1
		fi
	fi

  	# MySQL Database Creation
	if [ ! -d $qmaildir/mysqldb/data/mysql ] ; then
		echo "Creating mysql db"
  		$sudo $svctool --cntrldir=$cntrldir --config=mysqldb --mysqlPrefix=/usr \
			--mysqluser="$MYSQL_USER" --mysqlpass="$MYSQL_PASS" \
			--databasedir=$qmaildir/mysqldb --base_path=$testdir/mail \
			--mysqlsocket="$MYSQL_SOCK".tmp 1>&3 2>&1
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing svctool create MySQL Database succeeded"
		else
			fcount=$(expr $fcount + 1)
			echo "  testing svctool create MySQL Database failed"
			exit 1
		fi
		t=$($sudo ls $qmaildir/mysqldb/data/indimail/indimail.frm -a $qmaildir/mysqldb/data/indimail/indimail.ibd 2>/dev/null)
		if [ -n "$t" ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing for indimail MySQL database succeeded"
		else
			echo "  testing for indimail MySQL database failed"
			echo "Disabling mysqld service"
			touch $servicedir/mysql.3307/down
		fi
	fi

  	# MySQL service Creation
	mkdir -p $servicedir
	echo "Creating mysqld service"
  	$sudo $svctool --mysql=3307 --servicedir=$servicedir --mysqlPrefix=/usr \
		--databasedir=$qmaildir/mysqldb --config=$in_cnf 1>&3
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing svctool create MySQL service succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing svctool create MySQL service failed"
		exit 1
	fi
	$sudo chown -R $user $servicedir/mysql.3307
	printf "#!/bin/sh\nexec $setuidgid $user $multilog t $logdir/mysqld\n" > $servicedir/mysql.3307/log/run
	if [ ! -f $sysconfdir/headerlist ] ; then
		cp /etc/indimail/headerlist $sysconfdir
	fi
	$sudo chown $user $sysconfdir/headerlist
	$sudo chmod 644 $sysconfdir/headerlist
	# nssd config
	$sudo $svctool --sysconfdir=$sysconfdir --config=nssd \
		--threads=5 --timeout=-1 \
		--mysqluser="$MYSQL_USER" --mysqlpass="$MYSQL_PASS" \
		--mysqlhost=localhost --mysqlsocket=$MYSQL_SOCK --mysqlport=$MYSQL_PORT 
	$sudo chown $user $sysconfdir/nssd.conf
	sed -i "s{pidfile.*{pidfile     $testdir/pwdlookup/nssd.pid{g" $sysconfdir/nssd.conf
}

create_authimap()
{
	if [ -f /tmp/authimap ] ; then
		return 0
	fi
	(
	echo "#!/bin/sh"
	echo "if [ \$# -lt 1 ] ; then"
	echo "	exit 2"
	echo "fi"
	echo "var=\`tr [\"\\0\"] [\"\\n\"] 0<&3\`"
	echo "user=\`echo \$var | cut -d ' ' -f1\`"
	echo "pass=\`echo \$var | cut -d ' ' -f2\`"
	echo "echo user=\$user 1>&2"
	echo "echo pass=\$pass 1>&2"
	echo "exec 4>/tmp/authimap.\$\$ 3</tmp/authimap.\$\$"
	echo "/bin/rm -f /tmp/authimap.\$\$"
	echo "echo \$var | tr [\" \"] [\"\\0\"] 1>&4"
	echo "if [ \"\$user\" = \"$user@$HOSTNAME\" -a \"\$pass\" = \"abcd12345678\" ] ; then"
	echo "	exit 0"
	echo "fi"
	echo "exec \$*"
	) >/tmp/authimap
	chmod +x /tmp/authimap
}

setup_svscan()
{
	mkdir -p $servicedir/.svscan/log
	mkdir -p $servicedir/.svscan/variables
	mkdir -p $servicedir/qmail-send.2025/log
	mkdir -p $servicedir/qmail-send.2025/variables

	# svscan
	printf "#!/bin/sh\nexec echo hello world   > $testdir/svscan1.out\n" > $servicedir/.svscan/run
	printf "#!/bin/sh\nexec echo goodbye world > $testdir/svscan2.out\n" > $servicedir/.svscan/shutdown
	printf "#!/bin/sh\nexec $multilog t $logdir/svscan\n" > $servicedir/.svscan/log/run
	chmod +x $servicedir/.svscan/run
	chmod +x $servicedir/.svscan/shutdown
	chmod +x $servicedir/.svscan/log/run
	echo 1 > $servicedir/.svscan/variables/DISABLE_RUN
	echo 1 > $servicedir/.svscan/variables/SCANLOG
	echo 1 > $servicedir/.svscan/variables/SILENT
	echo   > $servicedir/.svscan/variables/INITCMD
	echo "/bin:/usr/bin:/usr/sbin" > $servicedir/.svscan/variables/PATH

	# imapd, pop3d, imapd-ssl, pop3d-ssl
	for j in authindi
	do
		IMAPMODULES="/usr/libexec/indimail/imapmodules/$j $IMAPMODULES"
	done
	for i in imap pop3
	do
		if [ "$i" = "imap" ] ; then
			port1=1430
			port2=9930
		else
			port1=1100
			port2=9950
		fi
		mkdir -p $servicedir/"$i"d/log
		mkdir -p $servicedir/"$i"d/variables
		mkdir -p $servicedir/"$i"d-ssl/log
		mkdir -p $servicedir/"$i"d-ssl/variables
		for j in d d-ssl
		do
			echo $indimaildir/inquery    > $servicedir/"$i"$j/variables/INFIFODIR
			echo $tmpfifodir             > $servicedir/"$i"$j/variables/FIFOTMPDIR
			echo 660                     > $servicedir/"$i"$j/variables/FIFO_MODE
			echo 1                       > $servicedir/"$i"$j/variables/USE_QPWGR
			echo 0                       > $servicedir/"$i"$j/variables/BIGTODO
			echo $confsplit              > $servicedir/"$i"$j/variables/CONFSPLIT
			echo $qmaildir/queue         > $servicedir/"$i"$j/variables/QUEUEDIR
			echo $cntrldir               > $servicedir/"$i"$j/variables/CONTROLDIR
			echo $sysconfdir             > $servicedir/"$i"$j/variables/SYSCONFDIR
			echo $sysconfdir/users       > $servicedir/"$i"$j/variables/ASSIGNDIR
			echo $certdir                > $servicedir/"$i"$j/variables/CERTDIR
			echo $qmaildir               > $servicedir/"$i"$j/variables/DOMAINDIR
			echo 1                       > $servicedir/"$i"$j/variables/DEBUG
			echo 1                       > $servicedir/"$i"$j/variables/DEBUG_LOGIN
			echo NONE                    > $servicedir/"$i"$j/variables/TLS_VERIFYPEER
			echo 1                       > $servicedir/"$i"$j/variables/OPEN_SMTP
			echo $certdir/servercert.pem > $servicedir/"$i"$j/variables/TLS_CERTFILE
		done
		(
		echo "#!/bin/sh"
		echo "prefix=/usr"
		echo "bindir=\${prefix}/bin"
		echo "libexecdir=/usr/libexec/indimail"
		echo "mkdir -p $indimaildir/inquery"
		echo "chmod 2770 $indimaildir/inquery"
		echo "chown qmaild:indimail $indimaildir/inquery"
		echo "exec 2>&1"
		echo "exec /usr/bin/envdir -c variables \\"
		echo " /usr/bin/softlimit -m $SOFT_MEM -o 1024 \\"
		) > $servicedir/"$i"d/run
		cp $servicedir/"$i"d/run $servicedir/"$i"d-ssl/run
		(
		echo "$tcpserver -o -H -l $HOSTNAME -R -u $INUID -g $INGID $LOCALIP $port1 \\"
		echo "\$prefix/sbin/"$i"login $IMAPMODULES $bindir/"$i"d Maildir"
		) >> $servicedir/"$i"d/run
		(
		echo "$tcpserver -o -H -l $HOSTNAME -R -u $INUID -g $INGID,qcerts $LOCALIP $port2 \\"
		echo "\$prefix/bin/couriertls -server -tcpd \\"
		echo "\$prefix/sbin/"$i"login $IMAPMODULES $bindir/"$i"d Maildir"
		) >> $servicedir/"$i"d-ssl/run
		chmod +x $servicedir/"$i"d/run
		chmod +x $servicedir/"$i"d-ssl/run
		printf "#!/bin/sh\nexec $setuidgid $user $multilog t $logdir/"$i"d\n"     > $servicedir/"$i"d/log/run
		printf "#!/bin/sh\nexec $setuidgid $user $multilog t $logdir/"$i"d-ssl\n" > $servicedir/"$i"d-ssl/log/run
		chmod +x $servicedir/"$i"d/log/run
		chmod +x $servicedir/"$i"d-ssl/log/run
	done

	# qmail-send
	mkdir -p $servicedir/qmail-send.2025/variables
	mkdir -p $servicedir/qmail-send.2025/log
	echo /bin:/usr/sbin    > $servicedir/qmail-send.2025/variables/PATH
	echo 0                 > $servicedir/qmail-send.2025/variables/BIGTODO
	echo 1                 > $servicedir/qmail-send.2025/variables/QPWGR
	echo 1                 > $servicedir/qmail-send.2025/variables/MAKE_SEEKABLE
	echo $confsplit        > $servicedir/qmail-send.2025/variables/CONFSPLIT
	echo $qmaildir/queue   > $servicedir/qmail-send.2025/variables/QUEUEDIR
	echo $sysconfdir       > $servicedir/qmail-send.2025/variables/SYSCONFDIR
	echo $cntrldir         > $servicedir/qmail-send.2025/variables/CONTROLDIR
	echo $sysconfdir/users > $servicedir/qmail-send.2025/variables/ASSIGNDIR
	printf "#!/bin/sh\nexec envdir ./variables $qmail_start -s ./Maildir/ 2>&1\n"    > $servicedir/qmail-send.2025/run
	printf "#!/bin/sh\nexec  $setuidgid $user $multilog t $logdir/qmail-send\n" > $servicedir/qmail-send.2025/log/run
	chmod +x $servicedir/qmail-send.2025/run
	chmod +x $servicedir/qmail-send.2025/log/run

	# qmail-smtpd
	mkdir -p $servicedir/smtpd/variables
	mkdir -p $servicedir/smtpd/log
	echo 1                 > $servicedir/smtpd/variables/USE_QPWGR
	echo 1                 > $servicedir/smtpd/variables/STARTTLS
	echo 0                 > $servicedir/smtpd/variables/BIGTODO
	echo $confsplit        > $servicedir/smtpd/variables/CONFSPLIT
	echo 1                 > $servicedir/smtpd/variables/ENABLE_CRAM
	echo 1                 > $servicedir/smtpd/variables/CHECKRELAY
	echo $qmaildir/queue   > $servicedir/smtpd/variables/QUEUEDIR
	echo $cntrldir         > $servicedir/smtpd/variables/CONTROLDIR
	echo $sysconfdir       > $servicedir/smtpd/variables/SYSCONFDIR
	echo $sysconfdir/users > $servicedir/smtpd/variables/ASSIGNDIR
	echo $certdir          > $servicedir/smtpd/variables/CERTDIR
	echo $qmaildir/inquery > $servicedir/smtpd/variables/INFIFODIR
	echo $qmaildir         > $servicedir/smtpd/variables/DOMAINDIR
	echo 1                 > $servicedir/smtpd/variables/DEBUG
	echo 1                 > $servicedir/smtpd/variables/DEBUG_LOGIN
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail,indimail -HR 0 2025 $qmail_smtpd $HOSTNAME /usr/sbin/vchkpass /bin/false 2>&1\n" > $servicedir/smtpd/run
	printf "#!/bin/sh\nexec $setuidgid $user $multilog t $logdir/smtpd\n" > $servicedir/smtpd/log/run
	chmod +x $servicedir/smtpd/run
	chmod +x $servicedir/smtpd/log/run

	# inlookup
	mkdir -p $tmpfifodir
	$sudo /bin/chown indimail:qmail $tmpfifodir
	$sudo chmod 770 $tmpfifodir
	mkdir -p $servicedir/inlookup.infifo/variables
	mkdir -p $servicedir/inlookup.infifo/log
	echo $cntrldir          > $servicedir/inlookup.infifo/variables/CONTROLDIR
	echo $sysconfdir/users  > $servicedir/inlookup.infifo/variables/ASSIGNDIR
	echo $qmaildir/inquery  > $servicedir/inlookup.infifo/variables/INFIFODIR
	echo 660                > $servicedir/inlookup.infifo/variables/FIFO_MODE
	echo infifo             > $servicedir/inlookup.infifo/variables/INFIFO
	echo 5                  > $servicedir/inlookup.infifo/variables/THREAD_COUNT
	echo 5184000            > $servicedir/inlookup.infifo/variables/CACHE_COUNT
	echo 1                  > $servicedir/inlookup.infifo/variables/MYSQL_OPT_RECONNECT
	echo $in_cnf            > $servicedir/inlookup.infifo/variables/MYSQL_READ_DEFAULT_FILE
	echo inlookup           > $servicedir/inlookup.infifo/variables/MYSQL_READ_GROUP
	echo                    > $servicedir/inlookup.infifo/variables/PASSWD_CACHE
	echo                    > $servicedir/inlookup.infifo/variables/QUERY_CACHE
	(
	echo "#!/bin/sh"
	echo "count=5"
	echo "echo \"initializing fifo count=\$count ...\""
	echo "/bin/rm -f $qmaildir/inquery/infifo.*"
	echo "for i in \$(seq 1 \$count); do f=$qmaildir/inquery/infifo.\$i; mkfifo \$f && /bin/chmod 660 \$f && /bin/chown qmaild:indimail \$f; done"
	echo "exec /usr/bin/envdir -c variables sh -c \""
	echo "exec /usr/bin/setuidgid -g qmail,indimail qmaild /usr/sbin/inlookup \\"
  	echo "-i \\\$THREAD_COUNT -c \\\$CACHE_COUNT\""
	) > $servicedir/inlookup.infifo/run
	printf "#!/bin/sh\nexec $setuidgid $user $multilog t $logdir/inlookup\n" > $servicedir/inlookup.infifo/log/run
	chmod +x $servicedir/inlookup.infifo/run
	chmod +x $servicedir/inlookup.infifo/log/run
}

do_svscan_start()
{
	echo
	echo "Starting svscan"
	(
	cd $servicedir/.svscan
	exec $sudo envdir -c variables $svscan $servicedir
	) &
	sleep $sleep_int
	tty -s && stty sane
	$sudo chown -R $user $servicedir/*/supervise
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	if [ -n "$svpid" ] ; then
		$sudo kill -0 $svpid >/dev/null 2>&1
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing command svscan (with svscanlog) startup succeeded with pid [$svpid]"
			tty -s && stty sane
		else
			fcount=$(expr $fcount + 1)
			if [ $prompt -eq 1 ] ; then
				less $logdir/svscan/current
			fi
			echo "  testing command svscan (with svscanlog) startup failed"
			[ -z "$failed" ] && failed="do_svscan_start" || failed="$failed, do_svscan_start"
			[ $continue_on_err -eq 0 ] && exit 1 || return 1
		fi
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/svscan/current
		fi
		echo "  testing command svscan (with svscanlog) startup failed"
		[ -z "$failed" ] && failed="do_svscan_start" || failed="$failed, do_svscan_start"
		[ $continue_on_err -eq 0 ] && exit 1 || return 1
	fi
}

test_svscan_log()
{
	grep "@.* svscan: info: pid: .*: starting..." $logdir/svscan/current >/dev/null
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command svscan log succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/svscan/current
		fi
		echo "  testing command svscan log failed"
		[ -z "$failed" ] && failed="test_svscan_log" || failed="$failed, test_svscan_log"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

test_svscan_run()
{
	if [ "$(cat $testdir/svscan1.out 2>/dev/null)" = "hello world" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command svscan run script execution succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/svscan/current
		fi
		echo "  testing command svscan run script execution failed"
		[ -z "$failed" ] && failed="test_svscan_run" || failed="$failed, test_svscan_run"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_svscan_stop()
{
	if [ $# -eq 0 ] ; then
		svpid=$(sed -n '$p' $servicedir/.svscan.pid 2>/dev/null)
		if [ -n "$svpid" ] ; then
			$sudo kill -0 $svpid
			if [ $? -ne 0 ] ; then
				return 0
			fi
		fi
	else
		svpid=$1
	fi
	if [ -d $servicedir/.svscan/log ] ; then
		if [ -n "$svpid" ] ; then
			$sudo kill $svpid
			sleep $sleep_int
		fi
		$sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log >/dev/null 2>&1
	else
		if [ -n "$svpid" ] ; then
			$sudo kill $svpid
			sleep $sleep_int
		fi
		sleep $sleep_int
		$sudo svc -dx $servicedir/* $servicedir/*/log >/dev/null 2>&1
	fi
}

do_setup()
{
	# basic setup for maildir, assign config and queue
	$sudo /bin/rm -rf $logdir
	mkdir -p $logdir/setup
	mkdir -p $logdir/qremote
	mkdir -p $logdir/gsasl
	mkdir -p $logdir/mysqld
	mkdir -p $logdir/inlookup
	mkdir -p $logdir/mail
	mkdir -p $logdir/qmail-send
	mkdir -p $logdir/svscan
	mkdir -p $logdir/imapd
	mkdir -p $logdir/pop3d
	mkdir -p $logdir/imapd-ssl
	mkdir -p $logdir/pop3d-ssl
	setup_maildir
	setup_assign
	setup_queue
	setup_svscan
	setup_config 3>>$logdir/setup/setup.log
}

create_domain()
{
	mkdir -p $sysconfdir/users
	mkdir -p $testdir/mail
	if [ $# -eq 3 ] ; then
		opt="-f"
	else
		opt=""
	fi
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
		vadddomain $opt -B $testdir/mail -d $qmaildir $1 $2 > $logdir/setup/vadddomain.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vadddomain succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadddomain.log
		fi
		echo "  testing command vadddomain failed"
		[ -z "$failed" ] && failed="vadddomain" || failed="$failed, vadddomain"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

create_plain_user()
{
	if [ $# -eq 3 ] ; then
		if [ "$3" = "default" ] ; then
			extra=""
		else
			extra="-h $3"
		fi
		hash="$3"
	else
		extra=""
		hash="default"
	fi
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
		vadduser -d $extra $1 $2 >> $logdir/setup/vadduser.log 2>&1
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vadduser (plain) hash=$hash succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadduser.log
		fi
		echo "  testing command vadduser (plain) hash=$hash failed"
		[ -z "$failed" ] && failed="create_plain_user" || failed="$failed, create_plain_user"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

create_cram_user()
{
	if [ $# -eq 3 ] ; then
		if [ "$3" = "default" ] ; then
			extra=""
		else
			extra="-h $3"
		fi
		hash="$3"
	else
		extra=""
		hash="default"
	fi
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
		vadduser -C -m CRAM -d $extra $1 $2 >> $logdir/setup/vadduser.log 2>&1
	status=$?
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vadduser (cram) hash=$hash succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadduser.log
		fi
		echo "  testing command vadduser (cram) hash=$hash failed"
		[ -z "$failed" ] && failed="vadduser (cram)" || failed="$failed, vadduser (cram)"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	pass=$($sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		vuserinfo -p $testuser2 | awk '{print $3}' | cut -c1-6)
	if [ "$pass" = "{CRAM}" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vadduser (cram format) succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadduser.log
		fi
		echo "  testing command vadduser (cram format) failed"
		[ -z "$failed" ] && failed="vadduser (cram format)" || failed="$failed, vadduser (cram format)"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

create_scram_user()
{
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
		vadduser -C -m $1 -d -h $4 $2 $3 >> $logdir/setup/vadduser.log 2>&1
	status=$?

	if [ $# -gt 4 ] ; then
		return $status
	fi
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vadduser (scram) hash=$4 succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadduser.log
		fi
		echo "  testing command vadduser (scram) hash=$4 failed"
		[ -z "$failed" ] && failed="vadduser (scram)" || failed="$failed, vadduser (scram)"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

delete_user()
{
	$sudo chown -R indimail:indimail $servicedir/inlookup.infifo
	$sudo chmod 660 $servicedir/inlookup.infifo/supervise/control
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
		vdeluser $1 >> $logdir/setup/vdeluser.log 2>&1
	status=$?
	$sudo chown -R $user $servicedir/inlookup.infifo
	if [ $# -gt 1 ] ; then
		return $status
	fi
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vdeluser succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vdeluser.log
		fi
		cat $logdir/setup/vdeluser.log
		echo "  testing command vdeluser failed"
		[ -z "$failed" ] && failed="vdeluser" || failed="$failed, vdeluser"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

delete_domain()
{
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
		SERVICEDIR=$servicedir \
	vdeldomain $1 > $logdir/setup/vdeldomain.log
	status=$?
	if [ $# -gt 1 ] ; then
		return $status
	fi
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vdeldomain succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vdeldomain.log
		fi
		echo "  testing command vdeldomain failed"
		[ -z "$failed" ] && failed="vdeldomain" || failed="$failed, vdeldomain"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

change_password()
{
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		SERVICEDIR=$servicedir \
	vpasswd $1 $2 > $logdir/setup/vpasswd.log
	if [ $status -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vpasswd succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vpasswd.log
		fi
		echo "  testing command vpasswd failed"
		[ -z "$failed" ] && failed="vpasswd" || failed="$failed, vpasswd"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

}

do_vmoduser()
{
	quota=$($sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		vuserinfo -q $1 | grep MiB | awk '{print $3}')
	if [ $quota -eq 524288000 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vuserinfo get quota ($quota) succeeded"
	else
		echo "  testing command vuserinfo get quota ($quota) failed"
	fi
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		SERVICEDIR=$servicedir \
	vmoduser -q +100m $1 > $logdir/setup/vmoduser.log
	if [ $status -ne 0 ] ; then
		echo "  testing command vmoduser failed"
	fi
	quota=$($sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		vuserinfo -q $1 | grep MiB | awk '{print $3}')
	if [ $quota -eq 629145600 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vmoduser update quota to $quota) succeeded"
	else
		echo "  testing command vmoduser update quota to $quota) failed"
	fi

}

do_inquerytest()
{
	$sudo $setuidgid indimail env - \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		INFIFODIR=$indimaildir/inquery \
		FIFOTMPDIR=$tmpfifodir \
		FIFO_MODE=0666 \
		/usr/sbin/inquerytest -v -q 3 -i "" $1 > $logdir/setup/inquerytest.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command inquerytest succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/inquerytest.log
		fi
		echo "  testing command inquerytest failed"
		[ -z "$failed" ] && failed="inquerytest" || failed="$failed, inquerytest"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_vdominfo()
{
	env - \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		ASSIGNDIR=$sysconfdir/users \
		/usr/bin/vdominfo > $logdir/setup/vdominfo.log 2>&1
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vdominfo succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vdominfo.log
		fi
		echo "  testing command vdominfo failed"
		[ -z "$failed" ] && failed="vdominfo" || failed="$failed, vdominfo"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_dbinfo()
{
	$sudo $setuidgid indimail env - \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		ASSIGNDIR=$sysconfdir/users \
		/usr/bin/dbinfo -s 	> $logdir/setup/dbinfo.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command dbinfo succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/dbinfo.log
		fi
		echo "  testing command dbinfo failed"
		[ -z "$failed" ] && failed="dbinfo" || failed="$failed, dbinfo"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

test_services()
{
	$sudo svstat $servicedir/* > $logdir/setup/services.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command svscan service startup succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/services.log
		fi
		echo "  testing command svscan service startup failed"
		[ -z "$failed" ] && failed="test_services" || failed="$failed, test_services"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

check_mail()
{
	# $1 - user
	# $2 - Maildir
	count=0
	ret=1
	(
	while true
	do
		mcount=$($sudo $setuidgid $1 ls $2/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$($sudo $setuidgid $1 ls -lt $2/new|head -2|tail -1|awk '{print $9}')
			echo "Got Mail $mail_file"
			subject=$($sudo sh -c "822header -I Subject < $2/new/$mail_file")
			echo $subject > $testdir/subject.tmp
			if [ $# -eq 2 ] ; then
				$sudo $setuidgid $1 /bin/rm -f $2/new/$mail_file
			fi
			return 0
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 5 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
	) >> $logdir/mail/mail.log 2>&1
}

do_smtp_auth_swaks()
{
	methods="LOGIN PLAIN CRAM-MD5 DIGEST-MD5"
	if [ $3 -eq 1 -o $3 -eq 3 ] ; then
		type="CRAM-NO "
	else
		type="CRAM=YES"
	fi
	for j in 1 2
	do
		case $j in
			1)
			str="incache=0"
			> $servicedir/smtpd/variables/PASSWD_CACHE
			> $servicedir/smtpd/variables/QUERY_CACHE
			;;
			2)
			str="incache=1"
			echo 1 > $servicedir/smtpd/variables/PASSWD_CACHE
			echo 1 > $servicedir/smtpd/variables/QUERY_CACHE
			;;
		esac
		$sudo svc -r $servicedir/smtpd
		check_service smtpd 3
		for i in $methods
		do
			case $i in
				LOGIN|PLAIN)
				pass=$2
				;;
				*)
				if [ $3 -eq 1 ] ; then
					pass=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -p $1 | awk '{print $3}')
				else
					pass=$2
				fi
				;;
			esac
			swaks -S --tls --to $user@$HOSTNAME --from $1 --server localhost --port 2025 -a $i -au $1 -ap "$pass"
			if [ $? -ne 0 ] ; then
				fcount=$(expr $fcount + 1)
				if [ $prompt -eq 1 ] ; then
					less $logdir/smtpd/current
				fi
				printf "  testing SMTP AUTH %-18s (%s) hash=%-8s %-7s using swk %s failed\n"    "$i" "$str" "$hash" "$type" "$1"
				[ -z "$failed" ] && failed="swaks-SMTP-AUTH-$i-hash-$hash" || failed="$failed, swaks-SMTP-AUTH-$i-hash-$hash"
				[ $continue_on_err -eq 0 ] && exit 1 || return 0
			fi
			check_mail $user $maildir
			if [ $? -eq 0 ] ; then
				last_line=$(tail -1 $logdir/smtpd/current|grep "AUTH $i:")
				if [ $? -eq 0 ] ; then
					tcount=$(expr $tcount + 1)
					printf "  testing SMTP AUTH %-18s (%s) hash=%-8s %-7s using swk %s succeeded\n" "$i" "$str" "$hash" "$type" "$1"
				else
					fcount=$(expr $fcount + 1)
					if [ $prompt -eq 1 ] ; then
						less $logdir/smtpd/current
					fi
					printf "  testing SMTP AUTH %-18s (%s) hash=%-8s %-7s using swk %s failed\n"    "$i" "$str" "$hash" "$type" "$1"
					[ -z "$failed" ] && failed="swaks-SMTP-AUTH-$i-hash-$hash" || failed="$failed, swaks-SMTP-AUTH-$i-hash-$hash"
					[ $continue_on_err -eq 0 ] && exit 1 || return 0
				fi
			else
				fcount=$(expr $fcount + 1)
				if [ $prompt -eq 1 ] ; then
					less $logdir/qmail-send/current
				fi
				echo "  testing mail delivery in do_smtp_auth_swaks failed - SMTP AUTH $i"
				[ -z "$failed" ] && failed="check_mail $maildir swaks-SMTP-AUTH-$i-hash-$hash" || failed="$failed, check_mail $maildir swaks-SMTP-AUTH-$i-hash-$hash"
				[ $continue_on_err -eq 0 ] && exit 1 || return 0
			fi
		done
		if [ $j -eq 2 ] ; then
			t=$(tail -2 $logdir/inlookup/current |head -1|awk '{print $6" "$7}')
			if [ "$t" = "['Password Query']," ] ; then
				echo "  testing command inquery password cache succeeded"
			else
				fcount=$(expr $fcount + 1)
				if [ $prompt -eq 1 ] ; then
					less $logdir/inlookup/current
				fi
				echo "  testing command inquery password cache failed"
				[ -z "$failed" ] && failed="inlookup PWD query" || failed="$failed, inlookup PWD query"
				[ $continue_on_err -eq 0 ] && exit 1 || return 0
			fi
		fi
	done
}

do_smtp_auth_qmr_o()
{
	# domain   = $1
	# user     = $2
	# password = $3
	# type     = $4 1 - CRAM=NO (plain user), 2 - CRAM=YES (plain user), 3 - CRAM=YES (scram user)
	if [ $4 -eq 1 -o $4 -eq 3 ] ; then
		type="CRAM=NO "
	else
		type="CRAM=YES"
	fi
	for j in 1 2
	do
		case $j in
			1)
			str="incache=0"
			> $servicedir/smtpd/variables/PASSWD_CACHE
			> $servicedir/smtpd/variables/QUERY_CACHE
			;;
			2)
			str="incache=1"
			echo 1 > $servicedir/smtpd/variables/PASSWD_CACHE
			echo 1 > $servicedir/smtpd/variables/QUERY_CACHE
			;;
		esac
		$sudo svc -r $servicedir/smtpd
		check_service smtpd 3
		methods="LOGIN PLAIN CRAM-MD5 CRAM-SHA1 CRAM-SHA224 CRAM-SHA256 CRAM-SHA384 CRAM-SHA512 CRAM-RIPEMD DIGEST-MD5"
		for i in $methods
		do
			case $i in
				LOGIN|PLAIN)
				pass=$3
				;;
				*)
				if [ $4 -eq 1 ] ; then
					pass=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -p $2 | awk '{print $3}')
				else
					pass=$3
				fi
				;;
			esac
			(
			echo "From: $2"
			echo "To: $user@$HOSTNAME"
			echo "Subject: Test"
			echo "Date: $(date -R)"
			echo
			echo "Test message"
			) | env - \
				SMTPROUTE="$1:127.0.0.1:2025 $2 $pass" \
				AUTH_SMTP="$i" \
				CONTROLDIR=$cntrldir \
			/usr/sbin/qmail-remote $1 $2 "" 10 $user@$HOSTNAME > $logdir/qremote/qmail-remote.log
			check_mail $user $maildir
			if [ $? -eq 0 ] ; then
				last_line=$(tail -1 $logdir/smtpd/current|grep "AUTH $i:")
				if [ $? -eq 0 ] ; then
					tcount=$(expr $tcount + 1)
					printf "  testing SMTP AUTH %-18s (%s) hash=%-8s %-7s using qmr %s succeeded\n" "$i" "$str" "$hash" "$type" "$2"
				else
					fcount=$(expr $fcount + 1)
					if [ $prompt -eq 1 ] ; then
						less $logdir/smtpd/current
					fi
					printf "  testing SMTP AUTH %-18s (%s) hash=%-8s %-7s using qmr %s failed\n"    "$i" "$str" "$hash" "$type" "$2"
					[ -z "$failed" ] && failed="qmr-SMTP-AUTH-$i-hash-$hash" || failed="$failed, qmr-SMTP-AUTH-$i-hash-$hash"
					[ $continue_on_err -eq 0 ] && exit 1 || return 0
				fi
			else
				fcount=$(expr $fcount + 1)
				if [ $prompt -eq 1 ] ; then
					less $logdir/qremote/qmail-remote.log
				fi
				echo "  testing mail delivery in do_smtp_auth_qmr_o failed - qmr-SMTP-AUTH $i"
				[ -z "$failed" ] && failed="check_mail $maildir qmr-SMTP-AUTH-$i-hash-$hash" || failed="$failed, check_mail $maildir qmr-SMTP-AUTH-$i-hash-$hash"
				[ $continue_on_err -eq 0 ] && exit 1 || return 0
			fi
		done
	done
}

do_smtp_auth_qmr_scram()
{
	(
	echo "From: $3"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SMTPROUTE="$2:127.0.0.1:2025 $3 $4" \
		AUTH_SMTP="$1" \
		CONTROLDIR=$cntrldir \
	/usr/sbin/qmail-remote $2 $3 "" 10 $user@$HOSTNAME >> $logdir/qremote/qmail-remote.log 2>&1
	check_mail $user $maildir
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/current|grep "AUTH $1:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using qmr (plaintext) succeeded\n" "$1" "$str" "$hash"
		else
			fcount=$(expr $fcount + 1)
			if [ $prompt -eq 1 ] ; then
				less $logdir/smtpd/current
			fi
			printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using qmr (plaintext) failed\n" "$1" "$str" "$hash"
			[ -z "$failed" ] && failed="qmr-SMTP-AUTH-plaintext-$1-hash-$hash" || failed="$failed, qmr-SMTP-AUTH-plaintext-$1-hash-$hash"
			[ $continue_on_err -eq 0 ] && exit 1 || return 0
		fi
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/qremote/qmail-remote.log
		fi
		echo "  testing mail delivery in do_smtp_auth_qmr_scram failed SMTP AUTH $1"
		[ -z "$failed" ] && failed="check_mail $maildir qmr-SMTP-AUTH-plaintext-$1-hash-$hash" || failed="$failed, check_mail $maildir qmr-SMTP-AUTH-plaintext-$1-hash-$hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	hexsalted=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -p $3 | cut -d: -f3)
	(
	echo "From: $3"
	echo "To: $user@$HOSTNAME"
	echo "Subject: Test"
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) | env - \
		SALTED_PASSWORD=1 \
		SMTPROUTE="$2:127.0.0.1:2025 $3 $hexsalted" \
		AUTH_SMTP="$1" \
		CONTROLDIR=$cntrldir \
	/usr/sbin/qmail-remote $2 $3 "" 10 $user@$HOSTNAME >> $logdir/qremote/qmail-remote.log 2>&1
	check_mail $user $maildir
	if [ $? -eq 0 ] ; then
		last_line=$(tail -1 $logdir/smtpd/current|grep "AUTH $1:")
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using qmr (hexsalted) succeeded\n" "$1" "$str" "$hash"
		else
			fcount=$(expr $fcount + 1)
			if [ $prompt -eq 1 ] ; then
				less $logdir/smtpd/current
			fi
			printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using qmr (hexsalted) failed\n" "$1" "$str" "$hash"
			[ -z "$failed" ] && failed="SMTP-AUTH-hexsalted-$1-hash-$hash" || failed="$failed, SMTP-AUTH-hexsalted-$1-hash-$hash"
			[ $continue_on_err -eq 0 ] && exit 1 || return 0
		fi
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/qremote/qmail-remote.log
		fi
		echo "  testing mail delivery in do_smtp_auth_qmr_scram failed SMTP AUTH $1"
		[ -z "$failed" ] && failed="check_mail $maildir SMTP-AUTH-hexsalted-$1-hash-$hash" || failed="$failed, check_mail $maildir SMTP-AUTH-hexsalted-$1-hash-$hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_gsasl_test()
{
	case $1 in
		SCRAM-SHA-1-PLUS|SCRAM-SHA-256-PLUS)
		opt=""
		;;
		SCRAM-SHA-1|SCRAM-SHA-256)
		opt="--no-cb"
		;;
	esac
	$gsasl -d $opt --hostname=$HOSTNAME --x509-ca-file="" -a $2 --password "$3" \
		--mechanism "$1" --smtp --connect localhost:2025 >> $logdir/gsasl/gsasl.log 2>&1
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using gsasl succeeded\n" "$1" "$str" "$hash"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/gsasl/gsasl.log
		fi
		printf "  testing SMTP AUTH %-18s (%s) hash=%-8s          using gsasl failed\n" "$1" "$str" "$hash"
		[ -z "$failed" ] && failed="SMTP-AUTH-gsasl-$1-hash-$hash" || failed="$failed, SMTP-AUTH-gsasl-$1-hash-$hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

check_relay()
{
	TM=$(expr $(date +%s) - 1800)
	echo "SELECT email,ipaddr from relay where timestamp > $TM" | \
		$mysql --defaults-file=$sysconfdir/indimail.cnf \
			-s -u $MYSQL_USER -p$MYSQL_PASS -S $MYSQL_SOCK $MYSQL_DB
	return $?
}

select_relay()
{
	TM=$(expr $(date +%s) - 1800)
	echo "SELECT email,ipaddr from relay where timestamp > $TM" | \
		$mysql --defaults-file=$sysconfdir/indimail.cnf \
			-s -u $MYSQL_USER -p$MYSQL_PASS -S $MYSQL_SOCK $MYSQL_DB
	echo "------------------------------------------"
	echo "SELECT email,ipaddr,timestamp from relay" | \
		$mysql --defaults-file=$sysconfdir/indimail.cnf \
			-s -u $MYSQL_USER -p$MYSQL_PASS -S $MYSQL_SOCK $MYSQL_DB
}

delete_relay()
{
	echo "DELETE from relay where 1=1" | \
		$mysql --defaults-file=$sysconfdir/indimail.cnf \
			-s -u $MYSQL_USER -p$MYSQL_PASS -S $MYSQL_SOCK $MYSQL_DB
	return $?
}

test_pop3()
{
	swaks -S --tls --to $1 --from $1 --server localhost --port 2025 -a LOGIN -au $1 -ap "$2"
	check_mail indimail $4 no-delete
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "printf \"user $1\r\n\" 1>&2"
	echo "printf \"user $1\r\n\""
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "printf \"%s\" \"\$line\" |grep \"+OK Password required.\" >/dev/null"
	echo "if [ \$? -ne 0 ] ; then"
	echo "	printf \"%s\n\" \"\$line\" 1>&2"
	echo "	echo \"Failed to get password prompt\" 1>&2"
	echo "	exit 1"
	echo "else"
	echo "	printf \"pass %s\n\" \"$2\" 1>&2"
	echo "	printf \"pass %s\n\" \"$2\""
	echo "fi"
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "printf \"%s\" \"\$line\" | grep \"+OK logged in.\" > /dev/null"
	echo "if [ \$? -ne 0 ] ; then"
	echo "	echo \"Failed to login\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "printf \"LIST\r\n\" 1>&2"
	echo "printf \"LIST\r\n\""
	echo "read line"
	echo "printf \"%s\" \"\$line\" |grep \"+OK POP3 clients that break here, they violate STD53.\" > /dev/null"
	echo "if [ \$? -ne 0 ] ; then"
	echo "	echo \"LIST command failed\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "octets=\$(printf \"%s\n\" \"\$line\"|awk '{print \$2}')"
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	if [ -z \"\$line\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "	printf \"%s\n\" \"\$line\" 1>&2"
	echo "	line=\$(echo \"\$line\"|tr -d '\r')"
	echo "	if [ -z \"\$line\" -o \"\$line\" = \".\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "done"
	echo "printf \"RETR 1\r\n\" 1>&2"
	echo "printf \"RETR 1\r\n\""
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "printf \"%s\" \"\$line\" | grep -E \"+OK .* octets follow.\" > /dev/null"
	echo "if [ \$? -ne 0 ] ; then"
	echo "	echo \"RETR command failed\" 1>&2"
	echo "	exit 1"
	echo "fi"
	echo "found=0"
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	if [ -z \"\$line\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "	printf \"%s\n\" \"\$line\" 1>&2"
	echo "	line=\$(echo \"\$line\"|tr -d '\r')"
	echo "	if [ \"\$line\" = \".\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "	echo \"\$line\" | grep \"This is a test mailing\" > /dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		found=1"
	echo "	fi"
	echo "done"
	echo "printf \"QUIT\r\n\""
	echo "read line"
	echo "printf \"%s\n\" \"\$line\" 1>&2"
	echo "if [ \$found -eq 1 ] ; then"
	echo "	exit 0"
	echo "else"
	echo "	exit 1"
	echo "fi"
	) > $testdir/tcpclient.pop3
	chmod +x $testdir/tcpclient.pop3
	check_service pop3d
	tcpclient -a 10 -vDHR 0 1100 /tmp/qmail-test/tcpclient.pop3 2>$logdir/pop3d/pop3d.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing POP3  login %s hash=%-8s and mail retrieval (%s) succeeded\n" "$1" "$hash" "$str"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/pop3d/pop3d.log
		fi
		printf "  testing POP3  login %s hash=%-8s and mail retrieval (%s) failed\n" "$1" "$hash" "$str"
		[ -z "$failed" ] && failed="POP3 login $hash" || failed="$failed, POP3 login $hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	check_relay > /dev/null 2>>$logdir/pop3d/pop3d.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing record in relay table succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/pop3d/pop3d.log
		fi
		printf "  testing record in relay table failed\n"
		[ -z "$failed" ] && failed="check relay" || failed="$failed, check relay"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	swaks -S --to tuser01@$domain3 --from $1 --server ::1 --port 2025 >> $logdir/pop3d/pop3d.log 2>&1
	ret1=$?
	swaks -S --to tuser01@$domain3 --from $3 --server ::1 --port 2025 >> $logdir/pop3d/pop3d.log 2>&1
	ret2=$?
	if [ $ret1 -eq 0 -a $ret2 -ne 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing Open RELAY using POP3  login succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/pop3d/pop3d.log
		fi
		printf "  testing Open RELAY using POP3  login failed ret1=%d ret2=%d\n" $ret1 $ret2
		[ -z "$failed" ] && failed="open relay pop3" || failed="$failed, open relay pop3"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	n1=$(openssl ciphers -v | awk '{print $2}' | grep TLS | sort | uniq | tail -1 |cut -c5- |cut -d. -f1)
	n2=$(openssl ciphers -v | awk '{print $2}' | grep TLS | sort | uniq | tail -1 |cut -c5- |cut -d. -f2)
	max=$(expr 10 \* $n1 + $n2)
	[ $max -gt 12 ] && fn=clientciphersuite || fn=clientcipherlist
	check_service pop3d-ssl 3
	sudo $setuidgid -g qcerts $user tcpclient -a 10 -f $cntrldir/$fn \
		-n $certdir/clientcert.pem -vDHR 0 9950 \
		/tmp/qmail-test/tcpclient.pop3 2>$logdir/pop3d-ssl/pop3d-ssl.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing POP3S login %s hash=%-8s and mail retrieval (%s) succeeded\n" "$1" "$hash" "$str"
	else
		fcount=$(expr $fcount + 1)
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/pop3d-ssl/pop3d-ssl.log
		fi
		printf "  testing POP3S login %s hash=%-8s and mail retrieval (%s) failed\n" "$1" "$hash" "$str"
		[ -z "$failed" ] && failed="POP3S login $hash" || failed="$failed, POP3S login $hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	swaks -S --to tuser01@$domain3 --from $1 --server ::1 --port 2025 >> $logdir/pop3d-ssl/pop3d-ssl.log 2>&1
	ret1=$?
	swaks -S --to tuser01@$domain3 --from $3 --server ::1 --port 2025 >> $logdir/pop3d-ssl/pop3d-ssl.log 2>&1
	ret2=$?
	if [ $ret1 -eq 0 -a $ret2 -ne 0 ] ; then
		tcount=$(expr $tcount + 1)
		delete_relay 2>>$logdir/pop3d/pop3d.log
		printf "  testing Open RELAY using POP3S login succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/pop3d-ssl/pop3d-ssl.log
		fi
		printf "  testing Open RELAY using POP3S login failed ret1=%d ret2=%d\n" $ret1 $ret2
		[ -z "$failed" ] && failed="open relay pop3s" || failed="$failed, open relay pop3s"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

test_imap()
{
	swaks -S --tls --to $1 --from $1 --server localhost --port 2025 -a LOGIN -au $1 -ap "$2"
	check_mail indimail $4 no-delete
	(
	echo "#!/bin/sh"
	echo "exec 0<&6"
	echo "exec 1>&7"
	echo "read key"
	echo "printf \"%s\n\" \"\$key\" 1>&2"
	echo "printf \"a1 login $1 $2\r\n\""
	echo "read key"
	echo "printf \"%s\" \"\$key\" |grep \"a1 OK LOGIN Ok.\" >/dev/null"
	echo "if [ \$? -ne 0 ] ; then"
	echo "	printf \"%s\n\" \"\$key\" 1>&2"
	echo "	echo \"LOGIN Failed\" 1>&2"
	echo "	exit 1"
	echo "else"
	echo "	printf \"%s\n\" \"\$key\" 1>&2"
	echo "fi"
	echo "printf \"a1 select inbox\r\n\""
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	if [ -z \"\$line\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "	t=\$(echo \"\$line\" | cut -d' ' -f1)"
	echo "	if [ \"\$t\" = \"*\" ] ; then"
	echo "		echo \"\$line\" 1>&2"
	echo "		continue"
	echo "	elif [ \"\$t\" = \"a1\" ] ; then"
	echo "		break"
	echo "	else"
	echo "		echo \"\$line\" 1>&2"
	echo "	fi"
	echo "done"
	echo ""
	echo "printf \"a1 fetch 1 RFC822\r\n\""
	echo "found=0"
	echo "while true"
	echo "do"
	echo "	read line"
	echo "	if [ -z \"\$line\" ] ; then"
	echo "		break"
	echo "	fi"
	echo "	echo \"\$line\" | grep \"a1 OK FETCH completed.\" > /dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		break"
	echo "	fi"
	echo "	echo \"\$line\" | grep \"This is a test mailing\" > /dev/null"
	echo "	if [ \$? -eq 0 ] ; then"
	echo "		found=1"
	echo "	fi"
	echo "	echo \"\$line\" 1>&2"
	echo "done"
	echo "printf \"a1 logout\r\n\""
	echo "read line"
	echo "printf \"%s\n\" \"\$line\""
	echo "if [ \$found -eq 1 ] ; then"
	echo "	exit 0"
	echo "else"
	echo "	exit 1"
	echo "fi"
	) > $testdir/tcpclient.imap
	chmod +x $testdir/tcpclient.imap
	check_service imapd 3
	tcpclient -a 10 -vDHR 0 1430 /tmp/qmail-test/tcpclient.imap 2>$logdir/imapd/imapd.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing IMAP  login %s hash=%-8s and mail retrieval (%s) succeeded\n" "$1" "$hash" "$str"
	else
		if [ $prompt -eq 1 ] ; then
			less $logdir/imapd/imapd.log
		fi
		printf "  testing IMAP  login %s hash=%-8s and mail retrieval (%s) failed\n" "$1" "$hash" "$str"
		[ -z "$failed" ] && failed="IMAP login $hash" || failed="$failed, IMAP login $hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	check_relay > /dev/null 2>>$logdir/pop3d/pop3d.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing record in relay table succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/imapd/imapd.log
		fi
		printf "  testing record in relay table failed\n"
		[ -z "$failed" ] && failed="check relay" || failed="$failed, check relay"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	swaks -S --to tuser01@$domain3 --from $1 --server ::1 --port 2025 >> $logdir/imapd/imapd.log 2>&1
	ret1=$?
	swaks -S --to tuser01@$domain3 --from $3 --server ::1 --port 2025 >> $logdir/imapd/imapd.log 2>&1
	ret2=$?
	if [ $ret1 -eq 0 -a $ret2 -ne 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing Open RELAY using IMAP login succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/imapd/imapd.log
		fi
		printf "  testing Open RELAY using IMAP  login failed ret1=%d ret2=%d\n" $ret1 $ret2
		[ -z "$failed" ] && failed="open relay imap" || failed="$failed, open relay imap"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	n1=$(openssl ciphers -v | awk '{print $2}' | grep TLS | sort | uniq | tail -1 |cut -c5- |cut -d. -f1)
	n2=$(openssl ciphers -v | awk '{print $2}' | grep TLS | sort | uniq | tail -1 |cut -c5- |cut -d. -f2)
	max=$(expr 10 \* $n1 + $n2)
	[ $max -gt 12 ] && fn=clientciphersuite || fn=clientcipherlist
	check_service imapd-ssl 3
	sudo $setuidgid -g qcerts $user tcpclient -a 10 -f $cntrldir/$fn  \
		-n $certdir/clientcert.pem -vDHR 0 9930 /tmp/qmail-test/tcpclient.imap \
		2>$logdir/pop3d-ssl/imapd-ssl.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing IMAPS login %s hash=%-8s and mail retrieval (%s) succeeded\n" "$1" "$hash" "$str"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/imapd-ssl/imapd-ssl.log
		fi
		printf "  testing IMAPS login %s hash=%-8s and mail retrieval (%s) failed\n" "$1" "$hash" "$str"
		[ -z "$failed" ] && failed="IMAPS login $hash" || failed="$failed, IMAPS login $hash"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	swaks -S --to tuser01@$domain3 --from $1 --server ::1 --port 2025 >> $logdir/imapd-ssl/imapd-ssl.log 2>&1
	ret1=$?
	swaks -S --to tuser01@$domain3 --from $3 --server ::1 --port 2025 >> $logdir/imapd-ssl/imapd-ssl.log 2>&1
	ret2=$?
	if [ $ret1 -eq 0 -a $ret2 -ne 0 ] ; then
		tcount=$(expr $tcount + 1)
		delete_relay 2>>$logdir/pop3d/pop3d.log
		printf "  testing Open RELAY using IMAPS login succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		select_relay 2>>$logdir/pop3d/pop3d.log
		delete_relay 2>>$logdir/pop3d/pop3d.log
		if [ $prompt -eq 1 ] ; then
			less $logdir/imapd-ssl/imapd-ssl.log
		fi
		printf "  testing Open RELAY using IMAPS login failed ret1=%d ret2=%d\n" $ret1 $ret2
		[ -z "$failed" ] && failed="open relay imaps" || failed="$failed, open relay imaps"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_post_handle()
{
	(
	echo "#!/bin/sh"
	echo "echo MYUID=\$(id -u)"
	echo "exit 0"
	) > $testdir/post_handle
	chmod +x $testdir/post_handle
	arg1=$1 # $domain1
	arg2=$2 # pass
	arg3=$3 # $domain2
	arg4=$4 # $testuser3
	arg5=$5 # $testuser4
	arg6=$6 # $domain3
	for i in vadddomain vaddaliasdomain vadduser vmoduser vmoveuserdir vrenameuser vrenamedomain vdeldomain1 vdeldomain2
	do
		prog=$i
		case $i in
			vadddomain)
			set -- -B $testdir/qmail -d $qmaildir $arg1 $arg2
			uid=$INUID
			;;
			vaddaliasdomain)
			set "$arg3 $arg1"
			uid=$INUID
			;;
			vadduser)
			set "$arg4 $arg2"
			uid=$INUID
			;;
			vmoduser)
			set -- -q +100m $arg4
			uid=$INUID
			;;
			vmoveuserdir)
			set "$arg4 $testdir/mail/T2Zsym/$domain1/testuser"
			uid=$INUID
			;;
			vrenameuser)
			set "$arg4 $arg5"
			uid=$INUID
			;;
			vrenamedomain)
			set "$arg1 $arg6"
			uid=$INUID
			;;
			vdeldomain1)
			prog=vdeldomain
			set "$arg3"
			uid=$INUID
			;;
			vdeldomain2)
			set "$arg6"
			prog=vdeldomain
			;;
			*)
			set "notset"
			;;
		esac
		if [ "$1" = "notset" ] ; then
			continue
		fi
		echo "Executing $prog $*"
		$sudo $setuidgid indimail env - \
			PATH=/usr/bin:/usr/sbin \
			POST_HANDLE=$testdir/post_handle \
			ASSIGNDIR=$sysconfdir/users \
			SYSCONFDIR=$sysconfdir \
			CONTROLDIR=$cntrldir \
			DOMAINDIR=$qmaildir \
		$prog $* > $logdir/setup/test"$i".log
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			printf "  testing command $prog succeeded\n"
			id=$(grep MYUID $logdir/setup/test"$i".log | grep MYUID | cut -d= -f2)
			if [ $id -eq $uid ] ; then
				tcount=$(expr $tcount + 1)
				printf "  testing POST HANDLE for $prog succeeded\n"
			else
				fcount=$(expr $fcount + 1)
				if [ $prompt -eq 1 ] ; then
					less $logdir/setup/test"$i".log
				fi
				printf "  testing POST HANDLE for $prog failed\n"
				[ -z "$failed" ] && failed="post handle $prog" || failed="$failed, post handle $prog"
				[ $continue_on_err -eq 0 ] && exit 1 || return 0
			fi
		else
			fcount=$(expr $fcount + 1)
			if [ $prompt -eq 1 ] ; then
				less $logdir/setup/test"$i".log
			fi
			printf "  testing command $prog failed\n"
			[ -z "$failed" ] && failed="$prog failed" || failed="$failed, $prog failed"
			[ $continue_on_err -eq 0 ] && exit 1 || return 0
		fi
	done
}

do_qmail_inject()
{
	# $1 - user
	# $2 - envelope From
	# $3 - envelope To
	# $4 - subject
	# $5 - header
	# $6 - from
	# $7 - to
	# $8 - cc
	if [ $# -eq 8 ] ; then
		cc=$8
	else
		cc=""
	fi
	if [ $# -eq 7 ] ; then
		to=$7
	else
		to=$3
	fi
	if [ $# -eq 6 ] ; then
		from=$6
	else
		from=$2
	fi
	if [ $# -eq 5 ] ; then
		header=$5
	else
		header=""
	fi
	if [ $# -eq 4 ] ; then
		subj=$4
	else
		subj="Testing qmail-inject"
	fi
	(
	echo "From: $from"
	echo "To: $to"
	if [ -n "$cc" ] ; then
		echo "Cc: $cc"
	fi
	echo "Subject: $subj"
	if [ -n "$header" ] ; then
		echo $header
	fi
	echo "Date: $(date -R)"
	echo
	echo "Test message"
	) > /tmp/mail.txt
	cat /tmp/mail.txt | $sudo $setuidgid -g qcerts $1 env - \
		CONTROLDIR=$cntrldir \
		QUEUEDIR=$qmaildir/queue \
		QMAILQUEUE=$qmail_queue \
		BIGTODO=0 \
		CONFSPLIT=$confsplit \
		$qmail_inject -f$2 $3
	if [ $? -eq 0 ] ; then
		return 0
	else
		fcount=$(expr $fcount + 1)
		[ -z "$failed" ] && failed="do_qmail_inject" || failed="$failed, do_qmail_inject"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_valias()
{
	# $1 is testuser1
	# $2 is testuser2
	echo "Starting valias tests"
	destdir1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $1 | awk '{print $3}')
	destdir2=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $2 | awk '{print $3}')
	$sudo $setuidgid indimail env - \
		PATH=/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
	valias -i "&$2" $1 # forward mails to testuser1 to testuser2
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing command valias insert succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		printf "  testing command valias insert failed\n"
		[ -z "$failed" ] && failed="valias insert" || failed="$failed, valias insert"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	do_qmail_inject $user $user@$HOSTNAME $1 # send email to testuser1 from $user@$HOSTNAME
	check_mail indimail $destdir2/Maildir
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing valias forwarding succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing valias forwarding failed"
		[ -z "$failed" ] && failed="valias forward" || failed="$failed, valias forward"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	$sudo $setuidgid indimail env - \
		PATH=/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
	valias -u "&$2" -i "$maildir/" $1
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing command valias update succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		printf "  testing command valias update failed\n"
		[ -z "$failed" ] && failed="valias update" || failed="$failed, valias update"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	$sudo chown -R $INUID:$INGID $maildir
	do_qmail_inject $user $user@$HOSTNAME $1
	sleep $sleep_int
	$sudo chown -R $MYUID:$MYUID $maildir
	check_mail $user $maildir
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing valias maildir delivery succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing valias maildir delivery failed"
		[ -z "$failed" ] && failed="valias maildir delivery" || failed="$failed, valias maildir delivery"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	$sudo $setuidgid indimail env - \
		PATH=/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		DOMAINDIR=$qmaildir \
	valias -d "&$2" $1
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing command valias delete succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		printf "  testing command valias delete failed\n"
		[ -z "$failed" ] && failed="valias delete" || failed="$failed, valias delete"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_pwdlookup()
{
	enc_pass1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -p $1 | awk '{print $3}')
	t=$(echo $1|cut -d@ -f1)
	mkdir -p $testdir/pwdlookup $logdir/pwdlookup
	env NSSD_SOCKET=$testdir/pwdlookup/nssd.sock \
		/usr/sbin/nssd -f $sysconfdir/nssd.conf -d debug >$logdir/pwdlookup/nssd.log 2>&1 &
	sleep 1
	enc_pass2=$(env NSSD_SOCKET=$testdir/pwdlookup/nssd.sock /usr/libexec/indimail/check_getpw $1 | \
		awk -F: '{print $1":"$2}')
	ret=$?
	kill $(cat $testdir/pwdlookup/nssd.pid)
	if [ $ret -eq 0 -a "$t:$enc_pass1" = "$enc_pass2" ] ; then
		tcount=$(expr $tcount + 1)
		printf "  testing pwdlookup succeeded\n"
	else
		fcount=$(expr $fcount + 1)
		printf "  testing pwdlookup failed\n"
		echo "ret=$? pass [$t:$enc_pass1] [$enc_pass2]"
		cat $logdir/pwdlookup/nssd.log
		[ -z "$failed" ] && failed="pwdlookup" || failed="$failed, pwdlookup"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

do_cleanup_failed()
{
	if [ -f $testdir/cleanup.done ] ; then
		rm -f $testdir/cleanup.done
	fi
	do_cleanup 1
}

do_cleanup()
{
	touch $testdir/cleanup.done
	delete_domain $domain1 1 >/dev/null 2>&1
	do_svscan_stop
	# Cleanup
	$sudo /bin/rm -rf $servicedir
	$sudo /bin/rm -rf $qmaildir/queue
	$sudo /bin/rm -rf $testdir/svscan1.out $testdir/svscan2.out
	if [ $# -eq 0 ] ; then
		$sudo /bin/rm -rf $logdir
		$sudo /bin/rm -rf $cntrldir
		$sudo /bin/rm -rf $qmaildir/alias
	fi
	$sudo /bin/rm -rf $qmaildir/inquery
	$sudo /bin/rm -rf $testdir/run
	if [ $# -eq 0 ] ; then
		$sudo /bin/rm -rf $testdir/mail
	fi
	$sudo /bin/rm -rf $testdir/$user
	$sudo /bin/rm -rf $testdir/inquery
	$sudo /bin/rm  -f $testdir/tcpclient.imap $testdir/tcpclient.pop3 $testdir/post_handle
	$sudo /bin/rm -rf $sysconfdir/users
	/bin/rm -f $sysconfdir/nssd.conf
	$sudo /bin/rm -rf $qmaildir/domains
	$sudo /bin/rm -rf $testdir/mail
}

do_autoresponder()
{
	echo "Starting Autoresponder test"
	destdir1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $1 | awk '{print $3}')
	destdir2=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $2 | awk '{print $3}')
	echo "Testing Autoresponder" > /tmp/vacation.$$
	$sudo env - \
		PATH=/bin:/usr/bin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		SERVICEDIR=$servicedir \
	vmoduser -l + $2 > $logdir/setup/vmoduser.log < /tmp/vacation.$$
	if [ $status -eq 0 ] ; then
		/bin/rm -f /tmp/vacation.$$
		tcount=$(expr $tcount + 1)
	else
		/bin/rm -f /tmp/vacation.$$
		fcount=$(expr $fcount + 1)
		echo "  testing vmoduser set vacation failed"
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vmoduser.log
		fi
		[ -z "$failed" ] && failed="autoresponder" || failed="$failed, autoresponder"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	subj="Testing Autoresponder"
	do_qmail_inject $user $1 $2 "$subj" # send email to testuser2 from $testuser1
	check_mail indimail $destdir2/Maildir
	if [ $? -ne 0 ] ; then
		echo "Check $destdir2/Maildir [$subject]"
		fcount=$(expr $fcount + 1)
		echo "  testing autoresponder failed"
		[ -z "$failed" ] && failed="autoresponder send_mail $2" || failed="$failed, autoresponder send_mail $2"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	check_mail indimail $destdir1/Maildir
	if [ $? -ne 0 ] ; then
		fcount=$(expr $fcount + 1)
		echo "  testing autoresponder failed2"
		[ -z "$failed" ] && failed="autoresponder" || failed="$failed, autoresponder"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
	subject=$(cat $testdir/subject.tmp)
	if [ "$subject" = "Subject: Autoreply: Re: $subj" ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing autoresponder succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "[$subject] [Subject: Autoreply: Re: $subj]"
		echo "  testing autoresponder failed (subject mismatch)"
		[ -z "$failed" ] && failed="autoresponder subject" || failed="$failed, autoresponder subject"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

run_vcfilter()
{
	$sudo env - \
		PATH=/bin:/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
		"$@"
}

do_plain_user_tests()
{
	for hash in "default" $hash_supported
	do
		echo
		echo "Starting SMTP AUTH, qmail-remote, IMAP/POP3 login tests for hash $hash plain/cram users"
		t1="$password2""$hash"
		t2="$password3""$hash"
		create_plain_user $testuser1 $t1 $hash
		create_cram_user  $testuser2 $t2 $hash
		do_inquerytest $testuser1
		do_inquerytest $testuser2
		echo  1 > $servicedir/smtpd/variables/ENABLE_CRAM
		if [ "$hash" = "DES" ] ; then
			echo -1 > $servicedir/smtpd/variables/PASSWORD_HASH
		else
			> $servicedir/smtpd/variables/PASSWORD_HASH
		fi
		do_smtp_auth_swaks $testuser1 $t1 1
		do_smtp_auth_qmr_o $domain1 $testuser1 $t1 1
		> $servicedir/smtpd/variables/ENABLE_CRAM
		do_smtp_auth_swaks $testuser2 $t2 2
		do_smtp_auth_qmr_o $domain1 $testuser2 $t2 2
		for j in 1 2
		do
			case $j in
				1)
				str="incache=0"
				for i in imap pop3
				do
					for k in d d-ssl
					do
						> $servicedir/"$i"$k/variables/PASSWD_CACHE
						> $servicedir/"$i"$k/variables/QUERY_CACHE
						if [ "$hash" = "DES" ] ; then
							echo -1 > $servicedir/"$i"$k/variables/PASSWORD_HASH
						else
							> $servicedir/"$i"$k/variables/PASSWORD_HASH
						fi
					done
				done
				;;
				2)
				str="incache=1"
				for i in imap pop3
				do
					for k in d d-ssl
					do
						echo 1 > $servicedir/"$i"$k/variables/PASSWD_CACHE
						echo 1 > $servicedir/"$i"$k/variables/QUERY_CACHE
						echo 1 > $servicedir/"$i"$k/variables/OPEN_SMTP
						if [ "$hash" = "DES" ] ; then
							echo -1 > $servicedir/"$i"$k/variables/PASSWORD_HASH
						else
							> $servicedir/"$i"$k/variables/PASSWORD_HASH
						fi
					done
				done
				;;
			esac
			for i in imap pop3
			do
				for k in d d-ssl
				do
					$sudo svc -r $servicedir/"$i"$k
				done
			done
			destdir1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser1 | awk '{print $3}')
			destdir2=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser2 | awk '{print $3}')
			check_service pop3d 3
			check_service pop3d-ssl 3
			test_pop3 $testuser2 $t2 $testuser1 $destdir2/Maildir
			test_pop3 $testuser1 $t1 $testuser2 $destdir1/Maildir
			check_service imapd 3
			check_service imapd-ssl 3
			test_imap $testuser2 $t2 $testuser1 $destdir2/Maildir
			test_imap $testuser1 $t1 $testuser2 $destdir1/Maildir
			echo "  testing SMTP AUTH, qmail-remote, IMAP/POP3 login tests for hash $hash plain/cram users succeeded"
		done
		delete_user $testuser1
		delete_user $testuser2
	done
}

do_scram_user_tests()
{
	echo 1 > $servicedir/smtpd/variables/ENABLE_CRAM
	for hash in $hash_supported
	do
		echo
		echo "Starting SMTP AUTH, IMAP/POP3 login, GSASL tests for hash $hash scram users"
		t1="$password1""$hash"
		t2="$password2""$hash"
		create_scram_user SCRAM-SHA-1   $testuser1 $t1 $hash
		create_scram_user SCRAM-SHA-256 $testuser2 $t2 $hash
		$sudo svc -h $servicedir/inlookup.infifo
		if [ "$hash" = "DES" ] ; then
			echo -1 > $servicedir/smtpd/variables/PASSWORD_HASH
		else
			> $servicedir/smtpd/variables/PASSWORD_HASH
		fi
		$sudo svc -r $servicedir/smtpd
		sleep $sleep_int
		check_service smtpd 3
		do_smtp_auth_swaks $testuser1 $t1 3
		do_smtp_auth_qmr_o $domain1 $testuser1 $t1 3
		for j in 1 2
		do
			case $j in
				1)
				str="incache=0"
				> $servicedir/smtpd/variables/PASSWD_CACHE
				> $servicedir/smtpd/variables/QUERY_CACHE
				for i in imap pop3
				do
					for k in d d-ssl
					do
						> $servicedir/"$i"$k/variables/PASSWD_CACHE
						> $servicedir/"$i"$k/variables/QUERY_CACHE
						if [ "$hash" = "DES" ] ; then
							echo -1 > $servicedir/"$i"$k/variables/PASSWORD_HASH
						else
							> $servicedir/"$i"$k/variables/PASSWORD_HASH
						fi
					done
				done
				;;
				2)
				str="incache=1"
				echo 1 > $servicedir/smtpd/variables/PASSWD_CACHE
				echo 1 > $servicedir/smtpd/variables/QUERY_CACHE
				for i in imap pop3
				do
					for k in d d-ssl
					do
						echo 1 > $servicedir/"$i"$k/variables/PASSWD_CACHE
						echo 1 > $servicedir/"$i"$k/variables/QUERY_CACHE
						if [ "$hash" = "DES" ] ; then
							echo -1 > $servicedir/"$i"$k/variables/PASSWORD_HASH
						else
							> $servicedir/"$i"$k/variables/PASSWORD_HASH
						fi
					done
				done
				;;
			esac
			$sudo svc -r $servicedir/smtpd
			check_service smtpd 3
			if [ -x $gsasl ] ; then
				do_gsasl_test                   "SCRAM-SHA-1"        $testuser1 $t1
				do_gsasl_test                   "SCRAM-SHA-1-PLUS"   $testuser1 $t1
				do_gsasl_test                   "SCRAM-SHA-256"      $testuser2 $t2
				do_gsasl_test                   "SCRAM-SHA-256-PLUS" $testuser2 $t2
			fi
			do_smtp_auth_qmr_scram "SCRAM-SHA-1"        $domain1 $testuser1 $t1
			do_smtp_auth_qmr_scram "SCRAM-SHA-1-PLUS"   $domain1 $testuser1 $t1
			do_smtp_auth_qmr_scram "SCRAM-SHA-256"      $domain1 $testuser2 $t2
			do_smtp_auth_qmr_scram "SCRAM-SHA-256-PLUS" $domain1 $testuser2 $t2

			for i in imap pop3
			do
				for k in d d-ssl
				do
					$sudo svc -r $servicedir/"$i"$k
				done
			done
			destdir1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser1 | awk '{print $3}')
			check_service pop3d 3
			test_pop3 $testuser1 $t1 $testuser2 $destdir1
			check_service pop3d-ssl 3
			test_imap $testuser1 $t1 $testuser2 $destdir1
		done
		delete_user $testuser1
		delete_user $testuser2
		echo "  testing SMTP AUTH, IMAP/POP3 login, GSASL tests for hash $hash scram users succeeded"
	done
	tcount=$(expr $tcount + 3)
	printf "  testing command tcpserver non-encrypted succeeded\n"
	printf "  testing command tcpclient non-encrypted succeeded\n"
	printf "  testing command tcpclient encrypted     succeeded\n"
}

do_vfilter()
{
	echo "Starting VFILTER tests"
	$sudo env - \
		PATH=/bin:/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
	vmoddomain -f 1 -h bounce-no-mailbox $domain1 > $logdir/setup/vmoddomain.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vmoddomain set vfilter succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadddomain.log
		fi
		echo "  testing command vmoddomain set vfilter failed"
		[ -z "$failed" ] && failed="vmoddomain set vfilter" || failed="$failed, vmoddomain set vfilter"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	# Comparisions tets
	# 0 - Equals                                  1 - Contains
	# 2 - Does not contain                        3 - Starts with
	# 4 - Ends with                               5 - My id not in To, CC, Bcc
	# 6 - Numerical Logical Expression            7 - RegExp

	destdir1=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser1 | awk '{print $3}')
	destdir2=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser2 | awk '{print $3}')
	vcount=1
	for i in "Equals" "Contains" "Does not contain" "Starts with" "Ends with" \
		"My id not in To, CC, Bcc" "Numerical Logical Expression" "RegExp"
	do
		sudo /bin/rm -rf $destdir1/Maildir/.Quarantine
		# Test delivery to folder after matching folder
		case $i in
			"Equals")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -k "virus found" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: virus found"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"Contains")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -k "Vfilter $vcount" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: Test Vfilter $vcount"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"Does not contain")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -k "xxx yyyy zzz" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: abcdefgh"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"Starts with")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -k "yyy xxxx zzz" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: yyy xxxx zzz"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"Ends with")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -k "yyy1 zzz" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: yyy yyy1 zzz"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"My id not in To, CC, Bcc")
			run_vcfilter vcfilter -i -t "$i-Test" -c "$i" -f Quarantine -b 0  $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "" abcd@$domain1 efgh@$domain1 hijk@$domain1
			run_vcfilter vcfilter -d 0 $testuser2
			;;
			"Numerical Logical Expression")
			run_vcfilter vcfilter -i -t "Numerical Logical Expression" -c "$i" -k "%p >= 11.2" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: 12.24"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
			"RegExp")
			run_vcfilter vcfilter -i -t "Regular Expression" -c "$i" -k "abd.*efgh $count" -f Quarantine -b 0 -h "X-QHPSI" $testuser2
			do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-QHPSI: abd.dfkdjf...efgh $count"
			run_vcfilter vcfilter -d 1 $testuser2
			;;
		esac
		check_mail indimail $destdir2/Maildir/.Quarantine
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing vfilter delivery to matched folder comparision=$i succeeded"
		else
			fcount=$(expr $fcount + 1)
			echo "  testing vfilter delivery to matched folder comparision=$i failed"
			[ -z "$failed" ] && failed="do_vfilter folder comparision=$i" || failed="$failed, do_vfilter folder comparision=$i"
			[ $continue_on_err -eq 0 ] && exit 1 || return 0
		fi
		vcount=$(expr $vcount + 1)
	done

    # -b bounce action
	#    0               - Do not Bounce to sender
	#    3'&user@domain' - Forward to another id and Bounce
	#    3'|program'     - Feed mail to another program and Bounce
	echo "X-Header" >> $sysconfdir/headerlist

	# bounce to sender test
	#    1               - Bounce to sender
	run_vcfilter vcfilter -i -t "Test bounce" -c "Equals" -k "Test Header" -f /NoDeliver -b 1 -h "X-Header" $testuser2
	do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-Header: Test Header"
	run_vcfilter vcfilter -d 1 $testuser2
	check_mail indimail $destdir1/Maildir
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing vfilter delivery for bounce  on match succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing vfilter delivery for bounce  on match failed"
		[ -z "$failed" ] && failed="do_vfilter bounce on match" || failed="$failed, do_vfilter bounce on match"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	# forward to another id test
	#    2'&user@domain' - Forward to another id
	run_vcfilter vcfilter -i -t "Test bounce" -c "Equals" -k "Test Header" -f /NoDeliver -b "2&$testuser1" -h "X-Header" $testuser2
	do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-Header: Test Header"
	run_vcfilter vcfilter -d 1 $testuser2
	check_mail indimail $destdir1/Maildir
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing vfilter delivery for forward on match succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing vfilter delivery for forward on match failed"
		[ -z "$failed" ] && failed="do_vfilter forward on match" || failed="$failed, do_vfilter forward on match"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	# feed to another program test
	#    2'|program'     - Feed mail to another program
	(
		echo "#!/bin/sh"
		echo "$qmail_inject $testuser1"
	)  > $testdir/forwarder
	chmod +x $testdir/forwarder
	run_vcfilter vcfilter -i -t "Test bounce" -c "Equals" -k "Test Header" -f /NoDeliver -b "2|$testdir/forwarder" -h "X-Header" $testuser2
	do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-Header: Test Header"
	run_vcfilter vcfilter -d 1 $testuser2
	check_mail indimail $destdir1/Maildir
	if [ $? -eq 0 ] ; then
		/bin/rm -rf $testdir/forwarder
		tcount=$(expr $tcount + 1)
		echo "  testing vfilter delivery for feed program on match succeeded"
	else
		/bin/rm -rf $testdir/forwarder
		fcount=$(expr $fcount + 1)
		echo "  testing vfilter delivery for feed program on match failed"
		[ -z "$failed" ] && failed="do_vfilter feed program on match" || failed="$failed, do_vfilter feed program on match"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	# forward to another id and bounce test
	#    3'&user@domain' - Forward to another id and Bounce
	destdir3=$($sudo $setuidgid indimail envdir $servicedir/smtpd/variables vuserinfo -d $testuser3 | awk '{print $3}')
	run_vcfilter vcfilter -i -t "Test bounce" -c "Equals" -k "Test Header" -f /NoDeliver -b "3&$testuser3" -h "X-Header" $testuser2
	do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-Header: Test Header"
	run_vcfilter vcfilter -d 1 $testuser2
	check_mail indimail $destdir1/Maildir
	ret1=$?
	if [ $ret1 -eq 0 ] ; then
		check_mail indimail $destdir3/Maildir
		if [ $? -ne 0 ] ; then
			echo failed to forward to $testuser3
			ret1=1
		fi
	else
		echo failed to bounce to $testuser1
	fi
	if [ $ret1 -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing vfilter delivery for forward and bounce on match succeeded"
	else
		fcount=$(expr $fcount + 1)
		echo "  testing vfilter delivery for forward and bounce on match failed"
	echo "Press ENTER2"
	read key
		[ -z "$failed" ] && failed="do_vfilter forward and bounce on match" || failed="$failed, do_vfilter forward and bounce on match"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi


	# feed to another program and bounce test
	#    3'|program'     - Feed mail to another program and Bounce
	(
		echo "#!/bin/sh"
		echo "$qmail_inject $testuser3"
	)  > $testdir/forwarder
	chmod +x $testdir/forwarder
	run_vcfilter vcfilter -i -t "Test bounce" -c "Equals" -k "Test Header" -f /NoDeliver -b "3|$testdir/forwarder" -h "X-Header" $testuser2
	do_qmail_inject $user $testuser1 $testuser2 "Testing Vfilter" "X-Header: Test Header"
	run_vcfilter vcfilter -d 1 $testuser2
	check_mail indimail $destdir1/Maildir
	ret1=$?
	if [ $ret1 -eq 0 ] ; then
		check_mail indimail $destdir3/Maildir
		if [ $? -ne 0 ] ; then
			echo failed to forward to $testuser3
			ret1=1
		fi
	else
		echo failed to bounce to $testuser1
	fi
	if [ $ret1 -eq 0 ] ; then
		/bin/rm -rf $testdir/forwarder
		tcount=$(expr $tcount + 1)
		echo "  testing vfilter delivery for feed program and bounce on match succeeded"
	else
		/bin/rm -rf $testdir/forwarder
		fcount=$(expr $fcount + 1)
		echo "  testing vfilter delivery for feed program and bounce on match failed"
		[ -z "$failed" ] && failed="do_vfilter feed program and bounce on match" || failed="$failed, do_vfilter feed program and bounce on match"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi

	$sudo env - \
		PATH=/bin:/usr/bin:/usr/sbin \
		ASSIGNDIR=$sysconfdir/users \
		SYSCONFDIR=$sysconfdir \
		CONTROLDIR=$cntrldir \
	vmoddomain -f 0 -h bounce-no-mailbox $domain1 > $logdir/setup/vmoddomain.log
	if [ $? -eq 0 ] ; then
		tcount=$(expr $tcount + 1)
		echo "  testing command vmoddomain unset vfilter succeeded"
	else
		fcount=$(expr $fcount + 1)
		if [ $prompt -eq 1 ] ; then
			less $logdir/setup/vadddomain.log
		fi
		echo "  testing command vmoddomain unset vfilter failed"
		[ -z "$failed" ] && failed="vmoddomain unset vfilter" || failed="$failed, vmoddomain unset vfilter"
		[ $continue_on_err -eq 0 ] && exit 1 || return 0
	fi
}

## begin getopt
usage()
{
	echo "testindimail [-y|--nprompt]" 1>&2
}

display_tests()
{
	echo "svscan startup"
	echo "svscan log by creating .svscan/log/run"
	echo "svscan execute run script in /service/.svscan/run"
	echo "svscan start services configured in /service"
	echo "test domain creation using vadddomain"
	echo "test getting domain information using vdominfo"
	echo "test getting mysql db info using dbinfo"
	echo "test user creation with normal UNIX password by using vadduser"
	echo "test user modification using vmoduser to update quota"
	echo "test pwdlookup by using nssd or passwd, shadow, group in /etc/nsswitch.conf"
	echo "test user deletion using vdeluser"
	echo "test vfilter test match on header and deliver to a folder with various conditions"
	echo "  equals, contains, does not contain, starts with, ends with, numerical expression, regexp"
	echo "  my id not in to, cc, bcc"
	echo "test autoesponder"
	echo "test valias by creating a valias forward and sending mail to it"
	echo "test setting inlookup in debug mode"
	echo "test inlookup caching"
	echo "Test authenticated SMTP using swaks with auth methods PLAIN, LOGIN CRAM-MD5, DIGEST-MD5"
	echo "Test authenticated SMTP using qmail-remote with auth methods LOGIN PLAIN CRAM-MD5"
	echo "  CRAM-SHA1 CRAM-SHA224 CRAM-SHA256 CRAM-SHA384 CRAM-SHA512 CRAM-RIPEMD DIGEST-MD5"
	echo "Test IMAP, IMAPS, POP3, POP3S login with the user created to support non-SCRAM methods"
	echo "Test authenticated SMTP using gsasl to use SCRAM methods SCRAM-SHA-1, SCRAM-SHA-256, SCRAM-SHA-1-PLUS"
	echo "  SCRAM-SHA-256-PLUS"
	echo "Test authenticated SMTP using qmail to use SCRAM methods SCRAM-SHA-1, SCRAM-SHA-256, SCRAM-SHA-1-PLUS"
	echo "  SCRAM-SHA-256-PLUS"
	echo "Test IMAP, IMAPS, POP3, POP3S login with the user created to support SCRAM methods"
	echo "Test domain deletion"
	echo "Test execution of post handle scripts"
}

prompt=1
continue_on_err=0
sudo grep '\$y\$' /etc/shadow > /dev/null 2>&1
if [ $? -eq 0 ] ; then
	if [ -n "$hash_supported" ] ; then
		hash_supported="$hash_supported YESCRYPT"
	else
		hash_supported="YESCRYPT"
	fi
fi
options=$(getopt -a -n testindimail-virtual -o "hyc" -l help,noprompt,continue -- "$@")
if [ $? != 0 ]; then
  usage
  exit 1
fi
eval set -- "$options"
while :
do
	case "$1" in
		-y | --noprompt)
		prompt=0
		export LESS="-E"
		shift
		;;
		-c | --continue)
		continue_on_err=1
		shift
		;;
		-h | --help)
		usage
		display_tests
		exit 1
		;;
		--) # end of options
		shift
		break
		;;
		*)
		echo "Unexpected option: $1 - this should'nt happen." 1>&2
		usage
	exit 1
		;;
	esac
done
## end getopt
tty -s && stty sane
ID=$(id -u)
[ $ID -eq 0 ] && echo "This script cannot be run as root" 1>&2 && exit 1
sudo=$(which sudo 2>/dev/null)
[ -z "$sudo" ] && echo "This script requires sudo privileges" 1>&2 && exit 1
export SERVICEDIR=/service
tcount=0
fcount=0
if [ -x /usr/bin/mariadb ] ; then
	mysql=/usr/bin/mariadb
else
	mysql=/usr/bin/mysql
fi
do_setup
do_svscan_start
svpid=$(sed -n '$p' $servicedir/.svscan.pid)
test_svscan_log
test_svscan_run
test_services
check_service mysql.3307
create_domain $domain1 pass
do_vdominfo
do_dbinfo
create_plain_user $testuser1 $password2
change_password $testuser1 $password1
do_vmoduser $testuser1
if [ -f /etc/nsswitch.conf ] ; then
	if (grep ^passwd /etc/nsswitch.conf|grep nssd >/dev/null 2>&1 && \
			grep ^shadow /etc/nsswitch.conf|grep nssd >/dev/null 2>&1 && \
			grep ^group /etc/nsswitch.conf|grep nssd >/dev/null 2>&1) ; then
		do_pwdlookup $testuser1
	fi
fi
delete_user $testuser1

echo
create_plain_user $testuser1 $password1 >/dev/null 2>&1
create_plain_user $testuser2 $password2 >/dev/null 2>&1
create_plain_user $testuser3 $password3 >/dev/null 2>&1
do_vfilter

echo
do_autoresponder $testuser1 $testuser2

echo
do_valias $testuser1 $testuser2
delete_user $testuser1 >/dev/null 2>&1
delete_user $testuser2 >/dev/null 2>&1

$sudo svc -2 $servicedir/inlookup.infifo
check_service inlookup.infifo

do_plain_user_tests

do_scram_user_tests

echo
echo "Testing domain deletion"
delete_domain $domain1

echo
echo "Starting POST Handle tests"
do_post_handle $domain1 pass $domain2 $testuser3 $testuser4 $domain3

do_svscan_stop $svpid

wait
echo
do_cleanup
if [ $fcount -eq 0 ] ; then
	echo "All $tcount tests succeeded"
else
	echo "$tcount tests succeeded $fcount tests failed"
	echo "failed tests"
	echo $failed
fi
end=$(date +'%s')
secs=$(($end-$start))
printf '%d days, %d hours, %d minutes, %d seconds\n' $((secs/86400)) $((secs%86400/3600)) $((secs%3600/60)) \
	  $((secs%60))
exit 0

#
# $Log: testindimail-virtual,v $
# Revision 1.9  2023-09-25 18:39:23+05:30  Cprogrammer
# updated RCS
#
# Revision 1.8  2023-09-08 11:19:10+05:30  Cprogrammer
# removed duplicate tests
#
# Revision 1.7  2023-09-08 09:31:04+05:30  Cprogrammer
# added vfilter tests
#
# Revision 1.6  2023-08-23 13:09:26+05:30  Cprogrammer
# formated messages
#
# Revision 1.5  2023-08-22 21:23:31+05:30  Cprogrammer
# added test for autoresponder
#
# Revision 1.4  2023-08-04 00:11:14+05:30  Cprogrammer
# updated test script
#
# Revision 1.3  2023-07-31 20:24:57+05:30  Cprogrammer
# refactored code
#
# Revision 1.2  2023-07-16 22:42:59+05:30  Cprogrammer
# added test case for YESCRYPT
# test all hashes
#
# Revision 1.1  2023-07-15 00:14:58+05:30  Cprogrammer
# Initial revision
#
#
